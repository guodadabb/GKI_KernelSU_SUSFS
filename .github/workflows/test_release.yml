姓名: 测试发布

权限:
目录: 写#允许写入存储库内容（用于推送标签）
行动: 写#允许触发操作
  
在:
工作流调度:
输入:
发布:
描述: “你想创建一个发行版吗？”
必需的: 真实的
类型: 布尔逻辑
违约: 真实的
kernelsu_variant:
        #描述："选择内核SU|注意：选中MK SU时为标准版”
描述: "选择内核SU”
必需的: 真实的
类型: 选择
选项:
          - 正式的
          - 下一个
          - MKSU
          - 苏姬
违约: 苏姬
kernelsu_branch:
描述: "选择克苏分支"
必需的: 真实的
类型: 选择
选项:
          - 稳定（标准）
          - Dev（开发）
          - Other(其他/指定)
违约: Dev（开发）
      # kernelsu_branch_other:
      # 描述："如果选择了 "其他"，请指定您的自定义分支"
      # 必填项：假
      #类型:字符串#如果选择"其他"，则此输入为必填项
版本:
描述: '自定义版本名(如5.10.198后面的字符/留空则使用默认版本号)'
必需的: 假
类型: 线
使用锆合金:
描述: '是否开启增加更多ZR AM算法？'
必需的: 真实的
类型: 布尔逻辑
违约: 真实的
使用_kpm:
描述: ‘是否开启KPM功能？’
必需的: 真实的
类型: 布尔逻辑
违约: 真实的
获取经理:
描述: '是否同时获取最新KSU管理器？'
必需的: 真实的
类型: 布尔逻辑
违约: 假
工作:
获取经理:
用途: ./.github/workflows/get-manager.yml
隐情: 继承
和:
kernelsu_variant: ${{inputs.kernelsu_variant 变量}}

构建内核-a14-6-1:
用途: ./.github/workflows/kernel-a14-6.1.yml
隐情: 继承
和:
发布: ${{输入.make_release}}
kernelsu_variant: ${{inputs.kernelsu_variant 变量}}
kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # kernelsu_branch_other: ${{ inputs.kernelsu_branches_other }}
版本: ${{ inputs.version }}
使用锆合金: ${{输入.使用ZR AM}}
使用_kpm: ${{输入.使用_kpm}}

构建内核-a15-6-6:
用途: ./.github/workflows/kernel-a15-6.6.yml
隐情: 继承
和:
发布: ${{输入.make_release}}
kernelsu_variant: ${{inputs.kernelsu_variant 变量}}
kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # kernelsu_branch_other: ${{ inputs.kernelsu_branches_other }}
版本: ${{ inputs.version }}
使用锆合金: ${{输入。使用ZR AM}}
使用_kpm: ${{输入.使用_kpm}}

触发释放:
运行中: Ubuntu-最新
权限:
目录: 写
行动: 写
需要:
        - 获取经理
        - 构建内核-a14-6-1
        - 构建内核-a15-6-6
如果: ${{输入.make_release}}
env:
回购协议（回购协议）所有者: ShirkNeko
REPO_NAME: GKI_KernelSU_SUSFS
GITHUB_完成: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

发布名称: "内核：下一个内核："

发布说明: |
        此发布包含**${{输入。内核苏_variant=='下一步'&&'内核苏'||“}}${{输入.内核su_variant}}，请注意此处的KSU版本**、SFS v 1.5.7、LZ4KD

        功能:
-> ${{输入.kernelsu_variant ==“下一步” && 'KernelSU-' || ""}}${{输入。Kersu_变体}}-${{内核输入分支}}{{输入.kernelsu_variant ==“下一步” && 'KernelSU-' || ""}}${{输入。Kersu_变体}}-${{内核输入分支}}
—>苏第1.5.7页
        -> 手动系统调用钩子，实现更好的隐藏效果
—>魔术坐骑支持
        -> 简单隐藏在线检测
        -> 徒劳隐藏 jit-zygote-cache 检测
—>线卫的支持
—>BBR支持
{{{{输入.使用关键点的支持}}}}
-> **LZ4KD&ONEPLUS_LZ4K**  ${{输入.use_zram &&'支持' || '不支持' }}{{输入.use_zram &&'支持' || '不支持' }}
        
<详情>
        
        <summary>备注:</summary>
        -         - -> 在单一市场模式2 下，将显示为禁用或不兼容，原因是（编译内核时）使用了非kprob钩子，并且不再需要（非kprob钩子）！
        -         - -> 在最新版的系统，使用内核闪光刷入AK3压缩包会变砖，尝试https://github.com/libxzr/HorizonKernelFlasher!

</详情>

        模块: 
-> https://github.com/sidex15/ksu_module_susfs
        
步骤:
      #检查代码
      - 姓名: 退房代码
用途: 操作/结账@v3

      - 姓名: 确定分支为 KernelSU-${{inputs.kernelsu_variant 变量}}
如果: ${{输入.kernelsu_branch ==“开发”|| 输入.kernelsu_variant =='MKSU'|| 输入.kernelsu_variant =='SukiSU'  }}
运行: |
#根据用户输入确定分支
如果[[ "${{ inputs.kernelsu_variant }}" == "官方" || "${{ inputs.kernelsu_variant 0}}" == "MKSU" ]]；那么
分公司="主"
埃利夫[[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]；然后
分公司="主"
埃利夫[[ "${{ inputs.kernelsu_variant }}" == “下一步” ]]；然后
分公司="下一步"
其他的
回声"错误：未为"其他（其他/指定）"提供自定义分支" >&2
出口1
菲

#将选定的分支存储在GITHUB_ENV中
回传 "KSU_分行=$分行" >> $GITHUB_ENV

      - name: 获取提交哈希值或标签并生成 URL 于 KernelSU-${{ inputs.kernelsu_variant }}
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            REPO_URL="https://github.com/KernelSU-Next/KernelSU-Next.git"
            REPO_URL2="KernelSU-Next/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            REPO_URL="https://github.com/ShirkNeko/KernelSU.git"
            REPO_URL2="ShirkNeko/KernelSU"
          else
            echo "Unknown variant"
          fi
          
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && "${{ inputs.kernelsu_variant }}" != "MKSU" ]]; then
            # Fetch the latest tag
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            if [[ -z "$TAG" ]]; then
              echo "Error: Could not fetch latest tag for Stable(标准)" >&2
              exit 1
            fi
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"

          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            # Fetch the latest commit from "next" branch
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$KSU_BRANCH | awk '{ print $1 }')
            if [[ -z "$COMMIT_HASH" ]]; then
              echo "Error: Could not fetch latest commit for Dev(开发)" >&2
              exit 1
            fi
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"
          fi

          # Echo the values to GitHub environment for later use
          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV
          echo "KernelSU Reference: $KSU_REF"
          echo "KernelSU URL: $KSU_URL"

      - name: 获取提交哈希值并生成提交 URL
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: 将提交哈希值和链接添加到 `RELEASE_NOTES` 中，并将 KernelSU-Next 引用添加到 `RELEASE_NOTES` 中。
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Official 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/tiann/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Next 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/KernelSU-Next/KernelSU-Next" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "MKSU 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/5ec1cff/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "SukiSU 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/ShirkNeko/SukiSU-Ultra" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Unknown variant"
          fi
          
      - name: 将提交哈希值和链接添加到 `RELEASE_NOTES` 中，并将 KernelSU-Next 引用添加到 `RELEASE_NOTES` 中。
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "LTO: thin" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "<details>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "<summary>提交信息</summary>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "提交的哈希值与链接(以下提交指的是,本次编译时,KSU或SUSFS所在的进度):" >> $GITHUB_ENV
          echo "- **KernelSU为${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}** (提交): [$KSU_REF]($KSU_URL)" >> $GITHUB_ENV
          echo "- **SUSFS4KSU** (提交):" >> $GITHUB_ENV
          echo "  - gki-android14-6.1: [$COMMIT_HASH_gki_android14_6_1]($COMMIT_URL_gki_android14_6_1)" >> $GITHUB_ENV
          echo "  - gki-android15-6.6: [$COMMIT_HASH_gki_android15_6_6]($COMMIT_URL_gki_android15_6_6)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      # Get the Latest Tag from GitHub
      - name: 生成和创建新标签
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN  }}
        run: |
            # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.5.5-r0"
            fi
            
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
            
            # Output the new tag to be used
            echo "New tag: $NEW_TAG"
            
            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
            
            # Create the tag in the repository
            git tag $NEW_TAG
            git push --tags

      # 下载 A12 的附件（仅当 A12 生成成功或输入为 true 或为空时）
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts
          
      - name: 设定 KSU 环境变量
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            git clone https://github.com/KernelSU-Next/KernelSU-Next.git
            cd KernelSU-Next
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 200))
            echo $KSU_VERSION
            echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
            echo "RELEASE_NAME=${{ env.RELEASE_NAME }}($KSU_VERSION) & SUSFS v1.5.7" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
            cd SukiSU-Ultra
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 606))
            echo $KSU_VERSION
            echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
            echo "RELEASE_NAME=${{ env.RELEASE_NAME }}($KSU_VERSION) & SUSFS v1.5.7" >> $GITHUB_ENV
          else
            echo "Unknown variant"
          fi

      # 如果 make_release 为 true，则创建 GitHub 发布并上传文件
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag for the release
          prerelease: true  # Mark the release as a pre-release
          release_name: ${{ env.RELEASE_NAME }} # Pass the RELEASE_NAME to the action
          body: ${{ env.RELEASE_NOTES }}  # Pass the RELEASE_NOTES to the action

      - name: 动态上传发布资产
        run: |
          # 先传管理器
          echo "Uploading $file..."
          gh release upload ${{ env.NEW_TAG }} "./downloaded-artifacts/*Manager*/*"
          # 再传其他
          for file in ./downloaded-artifacts/*_kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*

      - name: send telegram message on push
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_MESSAGE_THREAD_ID: ${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}
        run: |
            curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "message_thread_id=$TELEGRAM_MESSAGE_THREAD_ID" \
            -d "text=Latest release: 
            https://github.com/ShirkNeko/GKI_KernelSU_SUSFS/releases/tag/${{ env.NEW_TAG }}
            ${{ env.RELEASE_NOTES }}"
